# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: madcamp
# "service" is the name of this project. This will also be added to your AWS resource names.
service: me


provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-2  # 서울 리전
  
  vpc:
    securityGroupIds:
      - sg-07eacae6d3855c5fb
    subnetIds:
      - subnet-0dcf230a97d2f9420
      - subnet-00b5a3ea6c6e205b5
      - subnet-045b84f9deb5c8e1d
      - subnet-0524571fc57e5ec69
  
  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rds:*"
        - "secretsmanager:GetSecretValue"
      Resource: "*"

functions:
  getAllQuestions:
    handler: handlers/getAllQuestions.getAllQuestions
    events:
      - httpApi:
          path: /questions
          method: get

  registerUser:
    handler: handlers/registerUser.registerUser
    events:
      - httpApi:
          path: /users
          method: post

  login:
    handler: handlers/login.login
    events:
      - httpApi:
          path: /login
          method: post
  getProtectedData:
    handler: handlers/getProtectedData.getProtectedData
    events:
      - httpApi:
          path: /protected
          method: get
  getTodayQuestion:
    handler: handlers/getTodayQuestion.getTodayQuestion
    events:
      - httpApi:
          path: /questions/today
          method: get
  addAnswer:
    handler: handlers/addAnswer.addAnswer
    events:
      - httpApi:
          path: /answers
          method: post
  updateAnswer:
    handler: handlers/updateAnswer.updateAnswer
    events:
      - httpApi:
          path: /answers/{answerId}
          method: put
  deleteAnswer:
    handler: handlers/deleteAnswer.deleteAnswer
    events:
      - httpApi:
          path: /answers/{answerId}
          method: delete
  getAllUsers:
    handler: handlers/getAllUsers.getAllUsers
    events:
      - httpApi:
          path: /users
          method: get
  getUserInfo:
    handler: handlers/getUserInfo.getUserInfo
    events:
      - httpApi:
          path: /users/me
          method: get
  updateUserInfo:
    handler: handlers/updateUserInfo.updateUserInfo
    events:
      - httpApi:
          path: /users/me
          method: put
  getUserKeywords:
    handler: handlers/getUserKeywords.getUserKeywords
    events:
      - httpApi:
          path: /users/me/keywords
          method: get
  getUserColors:
    handler: handlers/getUserColors.getUserColors
    events:
      - httpApi:
          path: /users/me/colors
          method: get
  getAnswerDetails:
    handler: handlers/getAnswerDetails.getAnswerDetails
    events:
      - httpApi:
          path: /answers/{answer_id}
          method: get
  getRandomUserColors:
    handler: handlers/getRandomUserTrees.getRandomUserTrees
    events:
      - httpApi:
          path: /users/random/trees
          method: get
  getUserPublicAnswers:
    handler: handlers/getUserPublicAnswers.getUserPublicAnswers
    events:
      - httpApi:
          path: /answers/user/{user_id}
          method: get
  getFollowing:
    handler: handlers/getFollowing.getFollowing
    events:
      - httpApi:
          path: /users/me/following
          method: get
  addFriend:
    handler: handlers/addFriend.addFriend
    events:
      - httpApi:
          path: /friends/{friendId}
          method: post
  deleteFriend:
    handler: handlers/deleteFriend.deleteFriend
    events:
      - httpApi:
          path: /friends/{friendId}
          method: delete
  addLike:
    handler: handlers/addLike.addLike
    events:
      - httpApi:
          path: /likes/{answer_id}
          method: post
  deleteLike:
    handler: handlers/deleteLike.deleteLike
    events:
      - httpApi:
          path: /likes/{answer_id}
          method: delete
  getFriendsTrees:
    handler: handlers/getFriendsTrees.getFriendsTrees
    events:
      - httpApi:
          path: /friends/trees
          method: get
  getRecentAnswers:
    handler: handlers/getRecentAnswers.getRecentAnswers
    events:
      - httpApi:
          path: /answers/recent
          method: get
  getRecentQuestions:
    handler: handlers/getRecentQuestions.getRecentQuestions
    events:
      - httpApi:
          path: /questions/recent
          method: get
  getTodayAnswer:
    handler: handlers/getTodayAnswer.getTodayAnswer
    events:
      - httpApi:
          path: /answers/today
          method: get
  addTree:
    handler: handlers/addTree.addTree
    events:
      - httpApi:
          path: /users/tree
          method: post
plugins:  
  - serverless-offline
  - serverless-dotenv-plugin
